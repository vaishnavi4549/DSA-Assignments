//https://www.hackerrank.com/challenges/insert-a-node-into-a-sorted-doubly-linked-list/problem
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class DoublyLinkedListNode {
        public int data;
        public DoublyLinkedListNode next;
        public DoublyLinkedListNode prev;

        public DoublyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
            this.prev = null;
        }
    }

    static class DoublyLinkedList {
        public DoublyLinkedListNode head;
        public DoublyLinkedListNode tail;

        public DoublyLinkedList() {
            this.head = null;
            this.tail = null;
        }

        public void insertNode(int nodeData) {
            DoublyLinkedListNode node = new DoublyLinkedListNode(nodeData);

            if (this.head == null) {
                this.head = node;
            } else {
                this.tail.next = node;
                node.prev = this.tail;
            }

            this.tail = node;
        }
    }

    public static void printDoublyLinkedList(DoublyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }
    static DoublyLinkedListNode sortedInsert(DoublyLinkedListNode head, int data) {
    DoublyLinkedListNode node=new DoublyLinkedListNode(data);
    DoublyLinkedListNode x=head;
    DoublyLinkedListNode temp=head;
    while((x!=null) && (x.data<data)){
        temp=x;
        x=x.next;
    }
    if(x==head){
        node.next=head;
        head.prev=node;
        head=node;
    }
    else if(x==null){
        temp.next=node;
        node.prev=temp;
        node.next=null;
        
    }
    else{
        temp.next=node;
        node.prev=temp;
        x.prev=node;
        node.next=x;
    }
    return head;
    }
    private static final Scanner scanner = new Scanner(System.in);
